I";Q<p>In this blog-post I am trying to demystify SMTP (<em>at least for myself</em>).<br />
What exactly is it used for? What parties are involved? What about authentication and when? What attack surfaces are you opening with incorrect settings?</p>

<p>As you may have read in the other posts, I will most likely try to reflect my knowledge on specific topics or work on certain problems I face (mainly during work), where these blog-posts are aimed to help me.</p>

<p>This time it´s all about SMTP in regards of possible attacks and countermeasures, all from the point of view of an external attacker.</p>

<p><img src="/images/vrfymeme.png" alt="broken" title="vrfy" /></p>

<!--more-->
<p>What often really confused me was the fact that I didn´t know which part in the mail-flow I was playing when using telnet to manually connect to an SMTP-server during an engagement. <em>Am I acting as SMTP-server or client? Why is it not blocking my attempt to spoof emails at a certain stage?</em></p>

<p>So I set up a little <a href="https://www.hmailserver.com/download">hMailServer</a> and did some creative googling to get myself started.<br />
<em>Well in fact I had to cheat later on, as hMailServer didn´t support VRFY at all, and so set up another SMTP-server → <a href="http://www.pmail.com/downloads.htm">mercury</a></em>.</p>

<p>The whole write-up is considering external attacks, and as such you won´t find suggestions for internal hardening measures.</p>

<h2 id="smtp-introduction">SMTP Introduction</h2>

<p>The <strong>S</strong>imple <strong>M</strong>ail <strong>T</strong>ransfer <strong>P</strong>rotocol is meant to <strong>SEND</strong> emails from one system to another.<br />
This can be email-clients like Outlook, mail-servers like Microsoft Exchange, a firewall, etc.</p>

<p>The communication by default is done in plaintext. But nowadays you will most likely see mail-servers switching from plaintext to a secure channel with the help of <strong>SSL/TLS</strong>.<br />
The default ports are 25, 465 (deprecated) and 587, where 25 is meant to be used for submissions from your e-mail client to the e-mail server and the higher ports for relaying between SMTP-server. More on this can be found <a href="https://www.jscape.com/blog/smtp-ports">here</a>.</p>

<p>A SMTP-server is capable of acting as a client and a server, as it needs to send and receive emails at the same time. Consider a firewall which handles all your emails at “the gate”, outgoing and incoming - both times SMTP is involved.</p>

<p>Some terms used alongside with <strong>SMTP</strong> are:</p>

<p><strong>Mail User Agent (MUA)</strong>: This is a (part of a) program connecting to a SMTP-server in order to send an email. Most likely this is your Outlook, Thunderbird, whatever.</p>

<p><strong>Mail Transfer Agent (MTA)</strong>: The transport service part of a program. They receive and transfer the emails. This might be an Exchange server, an internet facing gateway and so on.</p>

<p>The corresponding <a href="https://tools.ietf.org/html/rfc5321#page-12">RFC5321</a> is only mentioning these two terms.<br />
However if you start asking the internet about <strong>SMTP</strong> you will most certain stumble upon <strong>Mail Submission Agent (MSA)</strong> and <strong>Mail Delivery Agent (MDA)</strong> and several others.<br />
These are also specific functions of a program involved in the email workflow, and make it possible to describe the process more precisely and granular. A <strong>MSA</strong> is the part which receives the email from the <strong>MUA</strong>, and the <strong>MDA</strong> is the part that will hand over the email to the final receiving <strong>MUA</strong>. Most likely all these functions will be found in one or two products in your environment, which can take care of all these steps.<br />
So a workflow of an email´s travel from one user to another could look like so:</p>

<p>MUA → MSA → MTA → internet → MTA → MDA → MUA</p>

<p>The terms <strong>relay</strong> and <strong>gateway</strong> are clearly defined in the <a href="https://tools.ietf.org/html/rfc5321#page-15">RFC5321</a> and I will let it do the talking:</p>

<p><code class="language-plaintext highlighter-rouge">A "relay" SMTP
   system (usually referred to just as a "relay") receives mail from an
   SMTP client and transmits it, without modification to the message
   data other than adding trace information, to another SMTP server for
   further relaying or for delivery.</code></p>

<p><code class="language-plaintext highlighter-rouge">A "gateway" SMTP system (usually referred to just as a "gateway")
   receives mail from a client system in one transport environment and
   transmits it to a server system in another transport environment.
   Differences in protocols or message semantics between the transport
   environments on either side of a gateway may require that the gateway
   system perform transformations to the message that are not permitted
   to SMTP relay systems.  For the purposes of this specification,
   firewalls that rewrite addresses should be considered as gateways,
   even if SMTP is used on both sides of them (see RFC 2979 [27]).</code></p>

<h2 id="a-sample-configuration">A Sample Configuration</h2>

<p>To make things easier to follow along, let´s consider the following scenario of a companie´s email setup:<br />
We have a Microsoft environment with Windows clients and Outlook acting as the <strong>MUA</strong>.<br />
We have an Exchange server which is just reachable from inside the network. It receives the emails a user wants to send and forwards them if needed.<br />
There also is an internet facing DMZ in which a firewall resides that also acts as a mail-gateway. So the Exchange server sends emails, for receipients outside the domains he is responsible for, to this firewall.<br />
The mail-flow will look like:</p>

<p><code class="language-plaintext highlighter-rouge">Outlook → Exchange → firewall → internet → SMTP-Server of the receiving side → mail-server of the receiving side → Outlook of receiver</code></p>

<h2 id="attacking-smtp-servers---mail-spoofing">Attacking SMTP-Servers - Mail Spoofing</h2>

<p>Now to the interesting part.<br />
When you are on an external engagement and you find a device with an open SMTP-port you most likely found a system that takes care of incoming emails from the internet as the first instance - in our case the firewall.</p>

<p>My personal workflow is that I first enumerate the company´s MX records to identify their attack surface regarding SMTP. This can be done by a simple <strong>nslookup</strong>:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nslookup
set type=mx
&lt;target&gt;
</code></pre></div></div>

<p>The result is a list of all systems responsible for incoming mail for that domain.</p>

<p><img src="/images/mxlookup.png" alt="broken" title="nslookup" /></p>

<p>Next is a nmap scan, to identify open ports:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nmap &lt;target&gt; -p 25,465,587
</code></pre></div></div>

<p>The output should look something like this:<br />
<img src="/images/nmap.png" alt="broken" title="nmap" /></p>

<p>What I do next is a manual connect to the server with the help of telnet or netcat and check if I can send spoofed emails (from their domain to their domain, as if I would sit inside their network):</p>

<p><img src="/images/telnet.JPG" alt="broken" title="telnet" /></p>

<p>First we open a connection to port 25 on the SMTP-server.<br />
We introduce ourselfs as acting on behalf of the <strong>company.com</strong> domain with an <strong>EHLO</strong>.<br />
Next specify the senders email-address <strong>pentester@company.com</strong>.<br />
Define who is the email for <strong>boss@company.com</strong>.<br />
Specify that we want to send some <strong>DATA</strong> with the email.<br />
The <strong>SUBJECT</strong> of our email is set.<br />
We fill the body with some text.<br />
Final terminator for the SMTP communication to show we are done and ready to send is the <strong>&lt;.&gt;</strong> on a single line.</p>

<p>If you need to connect to a server that only allows encrypted communication, you can use openssl:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>openssl s_client -starttls smtp -connect &lt;SMTP-server&gt;:587
</code></pre></div></div>

<p>At this stage the SMTP-server might react differently from case to case:</p>

<ol>
  <li>You might not even be able to connect to the server as it performs several checks that you fail to pass:<br />
<img src="/images/reject.png" alt="broken" title="reject" /></li>
  <li>Or you might get blocked when saying that you want to send from <strong>@company.com</strong> as you are not allowed to send from outside the network or a SPF-check is made (more on this later) or authentication is required (more on this later).</li>
  <li>The server might also say: <em>Nice buddy, thanks for the email. I will transfer it.</em></li>
</ol>

<p>When the latter happens, this is the point where I first thought: <em>Damn they made a mistake. I was able to send an email on their behalf. Let´s spam them with legit looking phishing mails.</em><br />
But mostly this turned out to be a wrong assumption. It only tells you that the (in this case) firewall accepted your request in the first instance. If it does other checks afterwards is out of sight for you. Normally the customer would tell me that the email was trapped at the firewall or that is was flagged as somehow malicious inside their Outlook. Both scenarios not putting them at risk.  <br />
This also is the point where it becomes clear that the customer needs some kind of authentication. <em>But how exactly and in what cases?</em><br />
Well, there are several scenarios that might apply here:</p>

<p><strong>1. Someone connects to your SMTP-server and wants to send from an external IP and domain to your domain.</strong><br />
This is the “normal” case that one would assume to happen on a daily basis.<br />
From a customers point of view we want to make sure to check (SPF,DKIM,DMARC) if the sending party is legit to do so. If all checks are passed, the email can be forwarded to the Exchange.</p>

<p><strong>2. Someone connects from an external IP to your SMTP-server and wants to send from your domain.</strong><br />
I would consider this to be at least unusual, as no one from your organisation will directly transfer their emails to the firewall under normal circumstances. The intended way is: Outlook → Exchange and not: Outlook → firewall. <br />
This is where authentication should come into play. Normally Outlook will push your email to the Exchange, and your Exchange will authenticate to the firewall in order to send emails to outside your organisation.<br />
If you reveive external emails, the sending IP and <strong>MAIL FROM</strong> will be from outside your domain. <br />
So if an external IP wants to send from your domain, and even worse to your domain, you should enforce authentication or otherwise reject the message.<br />
In my testlab a corresponding request will then fail like this:</p>

<p><img src="/images/telnet2.png" alt="broken" title="telnet" /></p>

<p>Authentication itself can be enforced by the use of SMTP-Auth/SMTP. This would allow for a login with PLAIN, LOGIN, CRAM-MD5, SCRAM-SHA-1 or NTLM.<br />
Authentication should always go hand in hand with encrypted communication (SSL/TLS), as credentials should not be transmitted in cleartext over unsecure networks.</p>

<p>More on this topic can be found here: <a href="https://en.wikipedia.org/wiki/SMTP_Authentication#:~:text=SMTP%20Authentication%2C%20often%20abbreviated%20SMTP,servers%2C%20where%20authentication%20is%20mandatory.">wikipedia</a></p>

<p>For hMailServer you can granularly set when authtentication is required:</p>

<p><img src="/images/smtpauth.png" alt="broken" title="smtpauth" /></p>

<p>as well as wether to enforce an encrypted communication or not:</p>

<p><img src="/images/smtpsecurity.png" alt="broken" title="smtpsecurity" /></p>

<p><strong>3. Someone connects to your SMTP-server and wants to send from an external domain to an external domain.</strong><br />
This would be considered an open mail-relay if allowed and you don´t want that to happen, unless you like yourself to be put on all the blacklists for spammers out there.<br />
This scenario is a type of misconfiguration where everyone would be able to abuse your SMTP-server to send out their SPAM to others around the globe.<br />
What you want to make sure here is the following:<br />
Your SMTP-server should not accept and forward emails from non-local IP addresses to non-local mailboxes by an unauthenticated or unauthorized user.</p>

<h3 id="spf-dkim-dmarc">SPF, DKIM, DMARC</h3>
<p>There are three countermeasures that were introdcued to reduce the abuse of emails.<br />
I will just scratch the surface here and try to explain in short what each of them does.</p>

<p><strong>SPF</strong><br />
The <strong>S</strong>ender <strong>P</strong>olicy <strong>F</strong>ramework  is checking if the sending system is authorized to send emails for the domain specified in the <strong>MAIL FROM</strong> field.<br />
To do so, it checks if the sending domain´s DNS records contain a TXT-record with a specific <strong>SPF</strong> entry:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>v=spf1 ip4:1.2.3.4 -all
</code></pre></div></div>

<p>If the IP part contains the server that sent the email, the receiving end knows that this system was allowed to send emails for the corresponding domain.</p>

<p>To read more on this check: <a href="https://postmarkapp.com/blog/explaining-spf">https://postmarkapp.com/blog/explaining-spf</a></p>

<p><strong>DKIM</strong><br />
<strong>D</strong>omain<strong>K</strong>eys <strong>I</strong>dentified <strong>M</strong>ail is a security standard designed to make sure that no tampering to an email has happened during the transit from sender to receiver.<br />
This is achieved with the help of public-key cryptography, where a company puts the public-key part inside a DNS-record for their domain and the private-key resides on the system that signs outgoing emails.<br />
These emails will contain a DKIM-signature in their headers, which is created with the help of the private-key.<br />
The receiving end will verify the signature with the help of the DNS-record, and if that passes, the message is considered to be authentic.</p>

<p>To read more on this check: <a href="https://postmarkapp.com/guides/dkim">https://postmarkapp.com/guides/dkim</a></p>

<p><strong>DMARC</strong><br />
<strong>D</strong>omain-based <strong>M</strong>essage <strong>A</strong>uthentication, <strong>R</strong>eporting &amp; <strong>C</strong>onformance is another standard, which prevents spammers from using your domain to send emails without your permission. It builds on top of <strong>SPF</strong> and <strong>DKIM</strong>.<br />
In short <strong>DMARC</strong> lets you decide what another company should do when receiving emails from your domain that fail to pass the <strong>SPF</strong> and <strong>DKIM</strong> checks.<br />
This also is achieved with the help of DNS-records for your domain which might look like so:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>_dmarc.company.com TXT v=DMARC1\; p=reject\; pct=100\; rua=mailto:dmarc-reports@company.com\;
</code></pre></div></div>
<p>This entry will define that 100% = all emails that fail to pass <strong>SPF</strong> or <strong>DKIM</strong> should be rejected and a report should be send to dmarc-reports@company.com.</p>

<p>To read more on this check: <a href="https://postmarkapp.com/guides/dmarc">https://postmarkapp.com/guides/dmarc</a></p>

<p>Many of the mail-systems nowadays will act on the basis of reputations. This is if a company fails to have implemented <strong>SPF</strong>, <strong>DKIM</strong> or <strong>DMARC</strong> or if it is sitting on a SPAM-blacklist for some reason, it´s reputation will be lowered and communication is less likely to be permitted.</p>

<p>Generally spoken the following points will make your SMTP-servers act in a secure manner (external view):</p>

<ul>
  <li>allow email from local IP addresses to local mailboxes</li>
  <li>allow email from local IP addresses to non-local mailboxes</li>
  <li>allow email from non-local IP addresses to local mailboxes</li>
  <li>allow email from clients that are authenticated and authorized if none of the three above is true</li>
  <li>make use of SPF, DKIM and DMARC, and don´t allow communication if one of the tests fails</li>
  <li>make use of reputations and only allow trusted sources to communicate with your mail infrastructure</li>
  <li>make use of blacklists</li>
  <li>enforce encrypted communication</li>
</ul>

<h2 id="attacking-smtp-servers---user-enumeration">Attacking SMTP-Servers - User Enumeration</h2>

<p>The enumeration of users is the second type of attack you want to mitigate.<br />
It´s easy for the bad guys to collect a list of email-addresses belonging to your company by social engineering and check their validity with the help of SMTP.<br />
Upon successful validation they can then be used for password-spray attacks and alike - for example against your OWA/EWS, O365, VPN or whatever.</p>

<p>There are at least three methods / commands that will allow for user enumeration:</p>

<p><strong>VRFY</strong>: Used to verifiy if a certain user is known to the SMTP-server<br />
<strong>EXPN</strong>: Used to reveal the actual email-address(es) of an alias<br />
<strong>RCPT TO</strong>: A needed command to specify to whom the email should be send</p>

<p>You can check if the commands are available with the <strong>HELP</strong> command (if available).</p>

<p><img src="/images/telnet1.JPG" alt="broken" title="telnet" /></p>

<p><strong>VRFY</strong> and <strong>EXPN</strong> both work the same way. You enter the command alongside with the account, name, alias or email-address you want to check. The response will either give you a <strong>250/251</strong> telling you that the account exists or expand the alias, or give you a <strong>550</strong>, informing you about an invalid account.</p>

<p><img src="/images/vrfyenum.png" alt="broken" title="telnet" /></p>

<p>The good news is, that you can disable <strong>VRFY</strong> and <strong>EXPN</strong> without a problem, and you should probably do so.<br />
The server´s response should then look like so:</p>

<p><img src="/images/disabledvrfy.png" alt="broken" title="telnet" /></p>

<p>In contrast <strong>RCPT TO</strong> is a needed must for the whole thing to work.</p>

<p><em>Fun fact: When I did the research for this blog-post, the very first google entry regarding SMTP and pentesting suggested to turn off RCPT TO. If that would be possible, you would render your SMTP-server useless.</em></p>

<p>However you can make it harder for attackers to enumerate your users by the following means:</p>

<ul>
  <li>Implementation of a catch-all-address / catch-all-rule / catch-all-server<br />
This will reply to every request with a <strong>250 Receipient OK</strong>. This might tell an attacker that you use a catch-all variant, but it won´t reveal users that actually exist. At a later step, not visible to the attacker, you can decide about what to do with emails send to unknown addresses.</li>
  <li>Limit maximum number of failed <strong>RCPT TO</strong> attempts<br />
If possible and supported, add a rule that kicks off connections, if too many failed <strong>RCPT TO</strong> attempts have been made by the same originating IP.</li>
</ul>

<h2 id="conclusion">Conclusion</h2>

<p>If configured unsafe, SMTP-servers can put your company at a high risk. You neither want external parties to send emails from your domain to your domain without authentication, nor do you want your SMTP-server to act as an open mail-relay.<br />
Make use of the security mechanisms that are available to protect your environment as much as possible.</p>

<p>From an attackers point of view it´s always useful to check for these low hanging fruits to get an initial foothold by spoofed phishing emails or at least do some recon on valid users and email-addresses. These might come in handy for further attacks like password-spraying.</p>

<p>So that´s it for now.<br />
I hope hope you liked this blog-post and were able to take away at least something.<br />
Happy hacking fellas.</p>
:ET